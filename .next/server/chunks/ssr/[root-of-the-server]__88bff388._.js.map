{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/cover-letter-generator.ts"],"sourcesContent":["// src/ai/flows/cover-letter-generator.ts\n'use server';\n\n/**\n * @fileOverview A Genkit flow for generating cover letters.\n *\n * - generateCoverLetter - A function that generates a cover letter based on achievements and a job description.\n * - GenerateCoverLetterInput - The input type for the generateCoverLetter function.\n * - GenerateCoverLetterOutput - The return type for the generateCoverLetter function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateCoverLetterInputSchema = z.object({\n  achievements: z\n    .string()\n    .describe('A list of the student\\'s achievements.'),\n  jobDescription: z\n    .string()\n    .describe(\n      'The job description for which the cover letter is being generated.'\n    ),\n    studentName: z.string().describe(\"The student's name.\"),\n});\nexport type GenerateCoverLetterInput = z.infer<typeof GenerateCoverLetterInputSchema>;\n\nconst GenerateCoverLetterOutputSchema = z.object({\n  coverLetter: z\n    .string()\n    .describe('The generated cover letter.'),\n});\nexport type GenerateCoverLetterOutput = z.infer<typeof GenerateCoverLetterOutputSchema>;\n\nexport async function generateCoverLetter(\n  input: GenerateCoverLetterInput\n): Promise<GenerateCoverLetterOutput> {\n  return generateCoverLetterFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'coverLetterGeneratorPrompt',\n  input: {schema: GenerateCoverLetterInputSchema},\n  output: {schema: GenerateCoverLetterOutputSchema},\n  prompt: `You are an expert career coach and resume writer.\n\n  Given the following student achievements and a job description, write a compelling and professional cover letter. The tone should be enthusiastic but professional.\n\n  The student's name is {{{studentName}}}.\n\n  Student's Achievements:\n  {{{achievements}}}\n\n  Job Description:\n  {{{jobDescription}}}\n\n  Generate a cover letter that is tailored to the job description, highlighting the most relevant skills and experiences from the student's achievements.\n  `,\n});\n\nconst generateCoverLetterFlow = ai.defineFlow(\n  {\n    name: 'generateCoverLetterFlow',\n    inputSchema: GenerateCoverLetterInputSchema,\n    outputSchema: GenerateCoverLetterOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,yCAAyC;;;;;;AAGzC;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CAAC;IACZ,gBAAgB,uIAAA,CAAA,IAAC,CACd,MAAM,GACN,QAAQ,CACP;IAEF,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACrC;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,oBACpB,KAA+B;IAE/B,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;;;;;;EAaT,CAAC;AACH;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/placeholder-images.ts"],"sourcesContent":["import data from './placeholder-images.json';\n\nexport type ImagePlaceholder = {\n  id: string;\n  description: string;\n  imageUrl: string;\n  imageHint: string;\n};\n\nexport const PlaceHolderImages: ImagePlaceholder[] = data.placeholderImages;\n"],"names":[],"mappings":";;;AAAA;;AASO,MAAM,oBAAwC,2GAAA,CAAA,UAAI,CAAC,iBAAiB","debugId":null}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mock-data.ts"],"sourcesContent":["\nimport { Student, AcademicRecord, Activity, ActivityCategory, GithubStats, GithubProject, Job } from './types';\nimport { PlaceHolderImages } from './placeholder-images';\n\nconst studentAvatar = PlaceHolderImages.find(img => img.id === 'student-avatar')?.imageUrl || 'https://picsum.photos/seed/student-avatar/100/100';\nconst facultyAvatar = PlaceHolderImages.find(img => img.id === 'faculty-avatar')?.imageUrl || 'https://picsum.photos/seed/faculty-avatar/100/100';\n\nexport const allSkills = [\n  'JavaScript', 'React', 'Node.js', 'Python', 'Data Analysis', \n  'Project Management', 'Public Speaking', 'Team Leadership',\n  'TypeScript', 'Java', 'C++', 'AWS', 'Red Hat', 'Linux', 'Marketing', 'UI/UX Design'\n];\n\nexport const activityCategories: ActivityCategory[] = [\n    'Conference',\n    'Workshop',\n    'Certification',\n    'Club Activity',\n    'Competition',\n    'Internship',\n    'Community Service',\n    'Other',\n];\n\nexport const allMajors = [\n    'Computer Science', 'Data Science', 'Electrical Engineering', 'Business Administration', \n    'Mechanical Engineering', 'Marketing', 'Physics', 'Biology'\n];\n\nconst firstNames = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Heidi\", \"Ivan\", \"Judy\", \"Mallory\", \"Niaj\", \"Olivia\", \"Peggy\", \"Quentin\", \"Rupert\", \"Sybil\", \"Trent\", \"Ulysses\", \"Victor\", \"Walter\", \"Xavier\", \"Yvonne\", \"Zelda\"];\nconst lastNames = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\", \"Garcia\", \"Miller\", \"Davis\", \"Rodriguez\", \"Martinez\", \"Hernandez\", \"Lopez\", \"Gonzalez\", \"Wilson\", \"Anderson\", \"Thomas\", \"Taylor\", \"Moore\", \"Jackson\", \"Martin\"];\n\n\nconst skillsByMajor: { [key: string]: string[] } = {\n    'Computer Science': ['TypeScript', 'React', 'Node.js', 'AWS', 'Java', 'Python', 'Linux'],\n    'Data Science': ['Python', 'Data Analysis', 'AWS', 'React', 'Machine Learning', 'SQL'],\n    'Electrical Engineering': ['C++', 'Java', 'Linux', 'Circuit Design', 'VHDL'],\n    'Business Administration': ['Project Management', 'Public Speaking', 'Marketing', 'Finance'],\n    'Mechanical Engineering': ['CAD', 'Thermodynamics', 'Project Management', 'Matlab'],\n    'Marketing': ['Marketing', 'Public Speaking', 'UI/UX Design', 'Social Media'],\n    'Physics': ['Python', 'Data Analysis', 'Matlab', 'Quantum Mechanics'],\n    'Biology': ['Data Analysis', 'Genetics', 'Lab Techniques', 'Python']\n};\n\nconst createMockData = () => {\n  const generatedUsers: Student[] = [];\n  let studentIdCounter = 10;\n\n  for (const major of allMajors) {\n    for (let i = 0; i < 100; i++) {\n      const firstName = firstNames[(studentIdCounter + i) % firstNames.length];\n      const lastName = lastNames[(studentIdCounter + i) % lastNames.length];\n      const name = `${firstName} ${lastName}`;\n      const id = `STU-${String(studentIdCounter).padStart(3, '0')}`;\n      const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}${i}@example.com`;\n      const avatarIndex = (studentIdCounter % 20);\n      const avatarId = `student-avatar-${avatarIndex + 2}`;\n      const avatarUrl = PlaceHolderImages.find(img => img.id === avatarId)?.imageUrl;\n      const studentSkills = skillsByMajor[major] || [];\n      const numSkills = (((studentIdCounter + i) % 3) + 2); // 2 to 4 skills\n      \n      const shuffledSkills = [...studentSkills]\n          .sort((a, b) => (a+b).charCodeAt(0) % 2 - 0.5) // Deterministic shuffle\n          .slice(0, numSkills);\n\n      generatedUsers.push({\n        id,\n        name,\n        email,\n        avatarUrl: avatarUrl || `https://picsum.photos/seed/${id}/100/100`,\n        major,\n        year: ((i % 4) + 1),\n        role: 'student',\n        skills: shuffledSkills,\n        skillRank: i + 1,\n      });\n      studentIdCounter++;\n    }\n  }\n\n  const generatedActivities: Activity[] = [];\n  generatedUsers.forEach((user, userIdx) => {\n    const numActivities = (userIdx % 5) + 1; // 1 to 5 activities\n    for (let i = 0; i < numActivities; i++) {\n      const category = activityCategories[(userIdx + i) % activityCategories.length];\n      generatedActivities.push({\n        id: `ACT-${user.id}-${i}`,\n        studentId: user.id,\n        studentName: user.name,\n        title: `${category} by ${user.name}`,\n        category: category,\n        date: new Date(2023, ((userIdx + i) % 12), ((userIdx + i) % 28) + 1),\n        description: `Generated activity for ${user.name} in ${category}.`,\n        status: 'Approved',\n        credits: ((userIdx + i) % 5) + 1, // 1 to 5 credits\n      });\n    }\n  });\n\n  return { generatedUsers, generatedActivities };\n}\n\n// Memoize the generated data\nconst getGeneratedData = (() => {\n  let cache: { generatedUsers: Student[], generatedActivities: Activity[] } | null = null;\n  return () => {\n    if (cache === null) {\n      cache = createMockData();\n    }\n    return cache;\n  };\n})();\n\nconst { generatedUsers, generatedActivities } = getGeneratedData();\n\n\nexport const users: Student[] = [\n  {\n    id: 'STU-001',\n    name: 'Tahzeeb',\n    email: 'student@gmail.com',\n    avatarUrl: studentAvatar,\n    major: 'Computer Science',\n    year: 3,\n    role: 'student',\n    githubUsername: 'Tahzeeb-sh0',\n    skills: ['TypeScript', 'React', 'Node.js', 'Project Management', 'AWS'],\n    skillRank: 1,\n  },\n  {\n    id: 'FAC-001',\n    name: 'Shweta',\n    email: 'faculty@gmail.com',\n    avatarUrl: facultyAvatar,\n    major: 'Computer Science',\n    year: 0, \n    role: 'faculty',\n  },\n   {\n    id: 'STU-002',\n    name: 'Jane Smith',\n    email: 'jane.smith@example.com',\n    avatarUrl: PlaceHolderImages.find(img => img.id === 'student-avatar-2')?.imageUrl,\n    major: 'Data Science',\n    year: 4,\n    role: 'student',\n    githubUsername: 'janesmith',\n    skills: ['Python', 'Data Analysis', 'React', 'Red Hat', 'Linux'],\n    skillRank: 1, // Rank 1 in Data Science\n  },\n  {\n    id: 'STU-003',\n    name: 'Sam Wilson',\n    email: 'sam.wilson@example.com',\n    avatarUrl: PlaceHolderImages.find(img => img.id === 'student-avatar-3')?.imageUrl,\n    major: 'Electrical Engineering',\n    year: 2,\n    role: 'student',\n    skills: ['C++', 'Java', 'AWS', 'Linux'],\n    skillRank: 1, // Rank 1 in EE\n  },\n   {\n    id: 'STU-004',\n    name: 'Emily Davis',\n    email: 'emily.davis@example.com',\n    avatarUrl: PlaceHolderImages.find(img => img.id === 'student-avatar-4')?.imageUrl,\n    major: 'Business Administration',\n    year: 3,\n    role: 'student',\n    skills: ['Marketing', 'Project Management', 'Public Speaking'],\n    skillRank: 1,\n  },\n  {\n    id: 'STU-005',\n    name: 'Michael Brown',\n    email: 'michael.brown@example.com',\n    avatarUrl: PlaceHolderImages.find(img => img.id === 'student-avatar-5')?.imageUrl,\n    major: 'Mechanical Engineering',\n    year: 4,\n    role: 'student',\n    skills: ['Project Management', 'Team Leadership'],\n    skillRank: 1,\n  },\n  {\n    id: 'STU-006',\n    name: 'Jessica Garcia',\n    email: 'jessica.garcia@example.com',\n    avatarUrl: PlaceHolderImages.find(img => img.id === 'student-avatar-6')?.imageUrl,\n    major: 'Marketing',\n    year: 2,\n    role: 'student',\n    githubUsername: 'jessgarcia',\n    skills: ['Marketing', 'Public Speaking', 'UI/UX Design'],\n    skillRank: 1,\n  },\n  {\n    id: 'STU-007',\n    name: 'David Lee',\n    email: 'david.lee@example.com',\n    avatarUrl: PlaceHolderImages.find(img => img.id === 'student-avatar-7')?.imageUrl,\n    major: 'Physics',\n    year: 3,\n    role: 'student',\n    skills: ['Python', 'Data Analysis'],\n    skillRank: 1,\n  },\n  {\n    id: 'STU-008',\n    name: 'Sarah Martinez',\n    email: 'sarah.martinez@example.com',\n    avatarUrl: PlaceHolderImages.find(img => img.id === 'student-avatar-8')?.imageUrl,\n    major: 'Biology',\n    year: 4,\n    role: 'student',\n    skills: ['Team Leadership'],\n    skillRank: 1,\n  },\n  ...generatedUsers,\n];\n\nexport const student = users[0]; // Default to Tahzeeb for existing components that rely on a single student\nexport const facultyUser = users[1];\n\nexport const academicRecord: AcademicRecord = {\n  gpa: 3.8,\n  attendance: 95,\n  totalCredits: 120,\n  creditsEarned: 85,\n};\n\nexport const githubStats: GithubStats = {\n  repositories: 25,\n  commits: 531,\n  pullRequests: 42,\n  gists: 5,\n};\n\nexport const githubProjects: GithubProject[] = [\n  {\n    id: 'PROJ-001',\n    name: 'stuverse-app',\n    description: 'The very application you are using! A Next.js app for tracking student achievements.',\n    url: 'https://github.com/Tahzeeb-sh0/stuverse-app',\n    stars: 150,\n    forks: 30,\n    language: 'TypeScript',\n  },\n  {\n    id: 'PROJ-002',\n    name: 'portfolio-generator',\n    description: 'A tool to generate a personal portfolio website from a JSON file, built with React.',\n    url: 'https://github.com/Tahzeeb-sh0/portfolio-generator',\n    stars: 75,\n    forks: 12,\n    language: 'JavaScript',\n  },\n  {\n    id: 'PROJ-003',\n    name: 'genkit-flow-visualizer',\n    description: 'A developer tool to visualize and debug Genkit flows in real-time.',\n    url: 'https://github.com/Tahzeeb-sh0/genkit-flow-visualizer',\n    stars: 200,\n    forks: 45,\n    language: 'TypeScript',\n  },\n];\n\n\nexport const activities: Activity[] = [\n  {\n    id: 'ACT-001',\n    studentId: 'STU-001',\n    studentName: 'Tahzeeb',\n    title: 'Web Development Workshop',\n    category: 'Workshop',\n    date: new Date('2023-10-15'),\n    description: 'A week-long workshop on modern web development technologies.',\n    status: 'Approved',\n    credits: 2,\n  },\n  {\n    id: 'ACT-002',\n    studentId: 'STU-001',\n    studentName: 'Tahzeeb',\n    title: 'AI in Healthcare Conference',\n    category: 'Conference',\n    date: new Date('2023-11-05'),\n    description: 'Attended the annual conference on Artificial Intelligence applications in the healthcare sector.',\n    status: 'Approved',\n    credits: 1,\n  },\n  {\n    id: 'ACT-003',\n    studentId: 'STU-001',\n    studentName: 'Tahzeeb',\n    title: 'Summer Internship at TechCorp',\n    category: 'Internship',\n    date: new Date('2023-08-30'),\n    description: 'Completed a 3-month summer internship as a software engineering intern.',\n    status: 'Approved',\n    credits: 5,\n  },\n  {\n    id: 'ACT-004',\n    studentId: 'STU-001',\n    studentName: 'Tahzeeb',\n    title: 'Hackathon 2023',\n    category: 'Competition',\n    date: new Date('2023-09-20'),\n    description: 'Participated in the university-level hackathon and won 2nd place.',\n    status: 'Approved',\n    credits: 3,\n  },\n  {\n    id: 'ACT-005',\n    studentId: 'STU-001',\n    studentName: 'Tahzeeb',\n    title: 'Google Cloud Certified',\n    category: 'Certification',\n    date: new Date('2024-01-10'),\n    description: 'Earned the Associate Cloud Engineer certification from Google Cloud.',\n    status: 'Pending',\n    credits: 4,\n  },\n  {\n    id: 'ACT-006',\n    studentId: 'STU-002',\n    studentName: 'Jane Smith',\n    title: 'Data Science Bootcamp',\n    category: 'Workshop',\n    date: new Date('2024-02-01'),\n    description: 'Intensive bootcamp on data analysis and machine learning.',\n    status: 'Approved',\n    credits: 3,\n  },\n    {\n    id: 'ACT-007',\n    studentId: 'STU-001',\n    studentName: 'Tahzeeb',\n    title: 'Leadership Role in Coding Club',\n    category: 'Club Activity',\n    date: new Date('2023-05-20'),\n    description: 'Served as the president of the university coding club for the academic year 2022-2023.',\n    status: 'Approved',\n    credits: 3,\n  },\n  {\n    id: 'ACT-008',\n    studentId: 'STU-003',\n    studentName: 'Sam Wilson',\n    title: 'Community Tree Planting',\n    category: 'Community Service',\n    date: new Date('2023-04-22'),\n    description: 'Volunteered for a local environmental group to plant 100 trees.',\n    status: 'Approved',\n    credits: 1,\n  },\n  {\n    id: 'ACT-009',\n    studentId: 'STU-002',\n    studentName: 'Jane Smith',\n    title: 'National Design Competition',\n    category: 'Competition',\n    date: new Date('2024-03-15'),\n    description: 'Won first place in the national product design competition.',\n    status: 'Approved',\n    credits: 5,\n  },\n  {\n    id: 'ACT-010',\n    studentId: 'STU-003',\n    studentName: 'Sam Wilson',\n    title: 'Robotics Club Project Lead',\n    category: 'Club Activity',\n    date: new Date('2024-04-05'),\n    description: 'Led a team to build an autonomous rover for a university showcase.',\n    status: 'Approved',\n    credits: 3,\n  },\n   {\n    id: 'ACT-011',\n    studentId: 'STU-004',\n    studentName: 'Emily Davis',\n    title: 'Marketing Internship at Adify',\n    category: 'Internship',\n    date: new Date('2023-12-15'),\n    description: 'Managed social media campaigns and analyzed market trends for a startup.',\n    status: 'Approved',\n    credits: 5,\n  },\n  {\n    id: 'ACT-012',\n    studentId: 'STU-002',\n    studentName: 'Jane Smith',\n    title: 'Published Research Paper',\n    category: 'Other',\n    date: new Date('2024-05-01'),\n    description: 'Co-authored a paper on machine learning models for financial forecasting.',\n    status: 'Approved',\n    credits: 6,\n  },\n   {\n    id: 'ACT-013',\n    studentId: 'STU-004',\n    studentName: 'Emily Davis',\n    title: 'Business Case Competition',\n    category: 'Competition',\n    date: new Date('2024-02-20'),\n    description: 'Finalist in the inter-university business case competition.',\n    status: 'Pending',\n    credits: 3,\n  },\n  {\n    id: 'ACT-014',\n    studentId: 'STU-002',\n    studentName: 'Jane Smith',\n    title: 'Red Hat Certified System Administrator (RHCSA)',\n    category: 'Certification',\n    date: new Date('2024-03-20'),\n    description: 'Earned the RHCSA certification, demonstrating core system administration skills for Red Hat Enterprise Linux environments.',\n    status: 'Approved',\n    credits: 4,\n  },\n  {\n    id: 'ACT-015',\n    studentId: 'STU-003',\n    studentName: 'Sam Wilson',\n    title: 'AWS Certified Solutions Architect - Associate',\n    category: 'Certification',\n    date: new Date('2024-04-10'),\n    description: 'Validated technical expertise in designing and deploying scalable, highly available, and fault-tolerant systems on AWS.',\n    status: 'Approved',\n    credits: 5,\n  },\n  {\n    id: 'ACT-016',\n    studentId: 'STU-005',\n    studentName: 'Michael Brown',\n    title: 'ASME Design Competition',\n    category: 'Competition',\n    date: new Date('2023-11-20'),\n    description: 'Team lead for a project that won \"Most Innovative Design\" award.',\n    status: 'Approved',\n    credits: 4,\n  },\n  {\n    id: 'ACT-017',\n    studentId: 'STU-006',\n    studentName: 'Jessica Garcia',\n    title: 'DECA Chapter President',\n    category: 'Club Activity',\n    date: new Date('2024-01-15'),\n    description: 'Led the university DECA chapter, organizing events and competitions.',\n    status: 'Approved',\n    credits: 3,\n  },\n  {\n    id: 'ACT-018',\n    studentId: 'STU-007',\n    studentName: 'David Lee',\n    title: 'Undergraduate Research Symposium',\n    category: 'Conference',\n    date: new Date('2024-04-25'),\n    description: 'Presented research on quantum state simulations.',\n    status: 'Approved',\n    credits: 3,\n  },\n  {\n    id: 'ACT-019',\n    studentId: 'STU-008',\n    studentName: 'Sarah Martinez',\n    title: 'Volunteering at Local Hospital',\n    category: 'Community Service',\n    date: new Date('2023-12-01'),\n    description: 'Completed 100+ hours of volunteer work in the pediatric ward.',\n    status: 'Approved',\n    credits: 2,\n  },\n  {\n    id: 'ACT-020',\n    studentId: 'STU-005',\n    studentName: 'Michael Brown',\n    title: 'Internship at General Motors',\n    category: 'Internship',\n    date: new Date('2024-05-10'),\n    description: 'Six-month co-op focused on electric vehicle battery design.',\n    status: 'Pending',\n    credits: 6,\n  },\n  {\n    id: 'ACT-021',\n    studentId: 'STU-001',\n    studentName: 'Tahzeeb',\n    title: 'Campus Cleanup Drive',\n    category: 'Community Service',\n    date: new Date('2023-10-22'),\n    description: 'Organized and participated in a campus-wide cleanup event.',\n    status: 'Approved',\n    credits: 1,\n  },\n  {\n    id: 'ACT-022',\n    studentId: 'STU-001',\n    studentName: 'Tahzeeb',\n    title: 'Peer Tutoring for Intro to CS',\n    category: 'Other',\n    date: new Date('2023-11-15'),\n    description: 'Volunteered as a peer tutor for first-year computer science students.',\n    status: 'Approved',\n    credits: 2,\n  },\n  {\n    id: 'ACT-023',\n    studentId: 'STU-001',\n    studentName: 'Tahzeeb',\n    title: 'Agile Project Management Certificate',\n    category: 'Certification',\n    date: new Date('2024-02-18'),\n    description: 'Completed an online certification course on Agile and Scrum methodologies.',\n    status: 'Approved',\n    credits: 3,\n  },\n  ...generatedActivities,\n];\n\nexport const jobs: Job[] = [\n    {\n        id: 'JOB-001',\n        title: 'Frontend Developer Intern',\n        company: 'Innovate Inc.',\n        location: 'Remote',\n        type: 'Internship',\n        tags: ['React', 'TypeScript', 'CSS'],\n        description: 'Join our team to build and improve our user-facing features. Ideal for students passionate about UI/UX.',\n        datePosted: new Date('2024-05-20'),\n    },\n    {\n        id: 'JOB-002',\n        title: 'Software Engineer (New Grad)',\n        company: 'Tech Solutions LLC',\n        location: 'New York, NY',\n        type: 'Full-time',\n        tags: ['Java', 'Python', 'AWS'],\n        description: 'Looking for recent graduates to join our backend engineering team. You will work on scalable, cloud-based services.',\n        datePosted: new Date('2024-05-18'),\n    },\n    {\n        id: 'JOB-003',\n        title: 'Data Science Intern',\n        company: 'Data Insights Co.',\n        location: 'San Francisco, CA',\n        type: 'Internship',\n        tags: ['Python', 'SQL', 'Machine Learning'],\n        description: 'Analyze large datasets to extract meaningful insights and contribute to our predictive modeling projects.',\n        datePosted: new Date('2024-05-15'),\n    },\n    {\n        id: 'JOB-004',\n        title: 'Cloud Engineer',\n        company: 'Cloudways',\n        location: 'Austin, TX',\n        type: 'Full-time',\n        tags: ['AWS', 'Linux', 'Node.js'],\n        description: 'Manage and scale our cloud infrastructure. Experience with containerization (Docker, Kubernetes) is a plus.',\n        datePosted: new Date('2024-05-12'),\n    },\n     {\n        id: 'JOB-005',\n        title: 'UI/UX Design Intern',\n        company: 'Creative Minds',\n        location: 'Remote',\n        type: 'Internship',\n        tags: ['Figma', 'UI/UX Design', 'User Research'],\n        description: 'Work alongside our design team to create wireframes, prototypes, and high-fidelity mockups for our mobile app.',\n        datePosted: new Date('2024-05-10'),\n    },\n     {\n        id: 'JOB-006',\n        title: 'Marketing Associate',\n        company: 'Growth Gurus',\n        location: 'Boston, MA',\n        type: 'Full-time',\n        tags: ['Marketing', 'Social Media', 'SEO'],\n        description: 'Develop and execute marketing campaigns across multiple channels to drive user acquisition and engagement.',\n        datePosted: new Date('2024-05-08'),\n    }\n];\n    \n\n    \n\n\n\n    \n\n\n\n    \n\n\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1087, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/portfolio/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { generateCoverLetter } from \"@/ai/flows/cover-letter-generator\";\nimport { activities, users } from \"@/lib/mock-data\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\n\nconst CoverLetterSchema = z.object({\n  jobDescription: z.string().min(50, \"Please provide a more detailed job description.\"),\n  studentId: z.string(),\n  studentName: z.string(),\n});\n\nexport async function generateCoverLetterAction(prevState: any, formData: FormData) {\n  const validatedFields = CoverLetterSchema.safeParse({\n    jobDescription: formData.get('jobDescription'),\n    studentId: formData.get('studentId'),\n    studentName: formData.get('studentName'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      message: \"Validation failed\",\n      errors: validatedFields.error.flatten().fieldErrors,\n      coverLetter: \"\",\n    };\n  }\n\n  const { studentId, studentName, jobDescription } = validatedFields.data;\n\n  const student = users.find(u => u.id === studentId);\n  if (!student) {\n    return {\n      message: \"Student not found.\",\n      coverLetter: \"\",\n      errors: {},\n    };\n  }\n\n  const approvedActivities = activities\n    .filter(act => act.status === 'Approved' && act.studentId === studentId)\n    .map(act => `- ${act.title}: ${act.description} (Completed: ${format(act.date, 'PPP')})`)\n    .join('\\n');\n\n  try {\n    const result = await generateCoverLetter({\n        jobDescription: jobDescription,\n        achievements: approvedActivities,\n        studentName: studentName,\n    });\n\n    return {\n      message: \"success\",\n      coverLetter: result.coverLetter,\n      errors: {},\n    };\n  } catch (error) {\n    console.error(\"Error generating cover letter:\", error);\n    return {\n      message: \"An unexpected error occurred while generating the cover letter.\",\n      coverLetter: \"\",\n      errors: {},\n    };\n  }\n}\n\n    "],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AACA;;;;;;;;AAEA,MAAM,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;IACnC,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM;IACnB,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM;AACvB;AAEO,eAAe,0BAA0B,SAAc,EAAE,QAAkB;IAChF,MAAM,kBAAkB,kBAAkB,SAAS,CAAC;QAClD,gBAAgB,SAAS,GAAG,CAAC;QAC7B,WAAW,SAAS,GAAG,CAAC;QACxB,aAAa,SAAS,GAAG,CAAC;IAC5B;IAEA,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC5B,OAAO;YACL,SAAS;YACT,QAAQ,gBAAgB,KAAK,CAAC,OAAO,GAAG,WAAW;YACnD,aAAa;QACf;IACF;IAEA,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,cAAc,EAAE,GAAG,gBAAgB,IAAI;IAEvE,MAAM,UAAU,0HAAA,CAAA,QAAK,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;IACzC,IAAI,CAAC,SAAS;QACZ,OAAO;YACL,SAAS;YACT,aAAa;YACb,QAAQ,CAAC;QACX;IACF;IAEA,MAAM,qBAAqB,0HAAA,CAAA,aAAU,CAClC,MAAM,CAAC,CAAA,MAAO,IAAI,MAAM,KAAK,cAAc,IAAI,SAAS,KAAK,WAC7D,GAAG,CAAC,CAAA,MAAO,CAAC,EAAE,EAAE,IAAI,KAAK,CAAC,EAAE,EAAE,IAAI,WAAW,CAAC,aAAa,EAAE,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,IAAI,EAAE,OAAO,CAAC,CAAC,EACvF,IAAI,CAAC;IAER,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,kJAAA,CAAA,sBAAmB,AAAD,EAAE;YACrC,gBAAgB;YAChB,cAAc;YACd,aAAa;QACjB;QAEA,OAAO;YACL,SAAS;YACT,aAAa,OAAO,WAAW;YAC/B,QAAQ,CAAC;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO;YACL,SAAS;YACT,aAAa;YACb,QAAQ,CAAC;QACX;IACF;AACF;;;IAnDsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 1162, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/github-verifier.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A Genkit flow for verifying GitHub usernames.\n *\n * - verifyGithubUsername - Verifies if a GitHub username is likely to be owned by the student.\n * - VerifyGithubUsernameInput - The input type for the verification function.\n * - VerifyGithubUsernameOutput - The return type for the verification function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst VerifyGithubUsernameInputSchema = z.object({\n  studentName: z.string().describe(\"The student's full name.\"),\n  githubUsername: z\n    .string()\n    .describe('The GitHub username to be verified.'),\n});\nexport type VerifyGithubUsernameInput = z.infer<typeof VerifyGithubUsernameInputSchema>;\n\nconst VerifyGithubUsernameOutputSchema = z.object({\n  isLikelyOwner: z.boolean().describe('Whether the student is likely the owner of the GitHub account.'),\n  reasoning: z.string().describe('A brief explanation for the decision.'),\n});\nexport type VerifyGithubUsernameOutput = z.infer<typeof VerifyGithubUsernameOutputSchema>;\n\nexport async function verifyGithubUsername(\n  input: VerifyGithubUsernameInput\n): Promise<VerifyGithubUsernameOutput> {\n  return verifyGithubUsernameFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'githubVerifierPrompt',\n  input: {schema: VerifyGithubUsernameInputSchema},\n  output: {schema: VerifyGithubUsernameOutputSchema},\n  prompt: `You are an AI assistant that verifies if a GitHub username likely belongs to a given student based on their name.\n\n  The student's name is \"{{{studentName}}}\".\n  The GitHub username to verify is \"{{{githubUsername}}}\".\n\n  Your task is to determine if the username is a plausible match for the student's name. Consider common username patterns like:\n  - firstnamelastname\n  - firstname-lastname\n  - f-lastname\n  - flastname\n  - firstname_l\n  - etc., including variations with numbers.\n\n  If the username seems like a plausible match for the student's name, set isLikelyOwner to true. Otherwise, set it to false.\n  Provide a brief reasoning for your decision. For example, if the name is \"Jane Doe\" and the username is \"j-doe\", the reasoning could be \"The username 'j-doe' follows a common pattern of using the first initial and last name.\"\n  If the name is \"Jane Doe\" and the username is \"awesome-dev-123\", the reasoning could be \"The username 'awesome-dev-123' does not appear to be related to the student's name.\"\n  `,\n});\n\nconst verifyGithubUsernameFlow = ai.defineFlow(\n  {\n    name: 'verifyGithubUsernameFlow',\n    inputSchema: VerifyGithubUsernameInputSchema,\n    outputSchema: VerifyGithubUsernameOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,gBAAgB,uIAAA,CAAA,IAAC,CACd,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,eAAe,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IACpC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGO,eAAe,qBACpB,KAAgC;IAEhC,OAAO,yBAAyB;AAClC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA+B;IAC/C,QAAQ;QAAC,QAAQ;IAAgC;IACjD,QAAQ,CAAC;;;;;;;;;;;;;;;;EAgBT,CAAC;AACH;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAtCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 1237, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/portfolio/%5BstudentId%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateCoverLetterAction as '60ed4175aad50f7cf274b4b77e7c27a0b15ed87b0b'} from 'ACTIONS_MODULE0'\nexport {verifyGithubUsername as '405808c37022234272096dec5940ef66559a8889d9'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 1301, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/portfolio/%5BstudentId%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/portfolio/[studentId]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/portfolio/[studentId]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0S,GACvU,wEACA","debugId":null}},
    {"offset": {"line": 1315, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/portfolio/%5BstudentId%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/portfolio/[studentId]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/portfolio/[studentId]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA","debugId":null}},
    {"offset": {"line": 1329, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}