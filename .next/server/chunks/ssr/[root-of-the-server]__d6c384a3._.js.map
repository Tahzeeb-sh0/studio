{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/mock-test-generator.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A Genkit flow for generating mock test questions.\n *\n * - generateMockTestQuestions - Generates a multiple-choice quiz on a given topic.\n * - GenerateMockTestInput - The input type for the function.\n * - GenerateMockTestOutput - The return type for the function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nconst GenerateMockTestInputSchema = z.object({\n  topic: z.string().describe('The topic for the mock test.'),\n});\nexport type GenerateMockTestInput = z.infer<typeof GenerateMockTestInputSchema>;\n\nconst QuestionSchema = z.object({\n  question: z.string().describe('The question text.'),\n  options: z.array(z.string()).length(4).describe('A list of exactly 4 possible answers.'),\n  answer: z.string().describe('The correct answer. Must be one of the provided options.'),\n});\n\nconst GenerateMockTestOutputSchema = z.object({\n  questions: z.array(QuestionSchema).length(5).describe('A list of exactly 5 generated mock test questions.'),\n});\nexport type GenerateMockTestOutput = z.infer<typeof GenerateMockTestOutputSchema>;\n\nexport async function generateMockTestQuestions(input: GenerateMockTestInput): Promise<GenerateMockTestOutput> {\n  return generateMockTestQuestionsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'mockTestGeneratorPrompt',\n  input: { schema: GenerateMockTestInputSchema },\n  output: { schema: GenerateMockTestOutputSchema },\n  prompt: `You are an expert quizmaster. Your task is to generate a 5-question multiple-choice quiz based on the provided topic.\n\n  For each question, you must provide:\n  1. A clear and concise question.\n  2. Exactly four distinct options.\n  3. The single correct answer, which must exactly match one of the options.\n\n  The questions should be relevant to the topic: {{{topic}}}\n  `,\n});\n\nconst generateMockTestQuestionsFlow = ai.defineFlow(\n  {\n    name: 'generateMockTestQuestionsFlow',\n    inputSchema: GenerateMockTestInputSchema,\n    outputSchema: GenerateMockTestOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAGA,MAAM,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,QAAQ,CAAC;IAChD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAEA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,gBAAgB,MAAM,CAAC,GAAG,QAAQ,CAAC;AACxD;AAGO,eAAe,0BAA0B,KAA4B;IAC1E,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ;IAA4B;IAC7C,QAAQ;QAAE,QAAQ;IAA6B;IAC/C,QAAQ,CAAC;;;;;;;;EAQT,CAAC;AACH;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/mock-test/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { generateMockTestQuestions as generateQuestionsFlow, GenerateMockTestOutput } from \"@/ai/flows/mock-test-generator\";\n\nexport type Question = GenerateMockTestOutput['questions'][0] & { isCorrect?: boolean };\n\nexport async function generateMockTestQuestions(topic: string): Promise<{ questions: Question[] | null, error: string | null }> {\n  if (!process.env.GEMINI_API_KEY) {\n    return {\n      questions: null,\n      error: 'The Mock Test feature is currently offline. An API key is required.',\n    };\n  }\n\n  try {\n    const result = await generateQuestionsFlow({ topic });\n    return {\n      questions: result.questions.map(q => ({...q})),\n      error: null,\n    };\n  } catch (error) {\n    console.error('Error generating mock test questions:', error);\n    return {\n      questions: null,\n      error: 'An unexpected error occurred while generating the quiz.',\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAIO,eAAe,0BAA0B,KAAa;IAC3D,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;QAC/B,OAAO;YACL,WAAW;YACX,OAAO;QACT;IACF;IAEA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,+IAAA,CAAA,4BAAqB,AAAD,EAAE;YAAE;QAAM;QACnD,OAAO;YACL,WAAW,OAAO,SAAS,CAAC,GAAG,CAAC,CAAA,IAAK,CAAC;oBAAC,GAAG,CAAC;gBAAA,CAAC;YAC5C,OAAO;QACT;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yCAAyC;QACvD,OAAO;YACL,WAAW;YACX,OAAO;QACT;IACF;AACF;;;IArBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/mock-test/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateMockTestQuestions as '400839a4bbe4604075d40dccd45278cd3c9cfdf777'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/mock-test/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/mock-test/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/mock-test/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 432, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/mock-test/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/mock-test/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/mock-test/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 446, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}