{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/github-verifier.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A Genkit flow for verifying GitHub profiles.\n *\n * - verifyGithubProfile - A function that verifies a GitHub username and retrieves basic stats.\n * - GithubProfileInput - The input type for the verifyGithubProfile function.\n * - GithubProfileOutput - The return type for the verifyGithubProfile function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nexport const GithubProfileInputSchema = z.object({\n  username: z.string().describe('The GitHub username to verify.'),\n});\nexport type GithubProfileInput = z.infer<typeof GithubProfileInputSchema>;\n\nexport const GithubProfileOutputSchema = z.object({\n  isValid: z.boolean().describe('Whether the GitHub user exists.'),\n  repositories: z.number().describe('The number of public repositories.'),\n  commits: z.number().describe('A realistic but random number of total commits for the last year.'),\n  pullRequests: z.number().describe('A realistic but random number of pull requests for the last year.'),\n  gists: z.number().describe('A realistic but random number of public gists.'),\n});\nexport type GithubProfileOutput = z.infer<typeof GithubProfileOutputSchema>;\n\n// Mock tool to simulate fetching GitHub profile data.\nconst getGithubProfile = ai.defineTool(\n  {\n    name: 'getGithubProfile',\n    description:\n      'Gets profile information for a given GitHub username. Returns null if the user does not exist.',\n    inputSchema: z.object({ username: z.string() }),\n    outputSchema: z.object({\n      repositories: z.number(),\n      commits: z.number(),\n      pullRequests: z.number(),\n      gists: z.number(),\n    }).nullable(),\n  },\n  async ({ username }) => {\n    // In a real app, you would fetch this data from the GitHub API.\n    // For this demo, we'll return mock data for a known user and null for others.\n    if (username.toLowerCase() === 'tahzeeb-sh0') {\n      return {\n        repositories: 25,\n        commits: 531,\n        pullRequests: 42,\n        gists: 5,\n      };\n    }\n    return null;\n  }\n);\n\nconst prompt = ai.definePrompt({\n  name: 'githubVerifierPrompt',\n  input: { schema: GithubProfileInputSchema },\n  output: { schema: GithubProfileOutputSchema },\n  tools: [getGithubProfile],\n  prompt: `Verify the GitHub user '{{{username}}}' using the getGithubProfile tool.\n\nIf the tool returns a user profile, set isValid to true and populate the repository, commit, pull request, and gist counts from the tool's output.\n\nIf the tool returns null, it means the user does not exist. In that case, set isValid to false and all other numeric fields to 0.\n`,\n});\n\nexport const verifyGithubProfileFlow = ai.defineFlow(\n  {\n    name: 'verifyGithubProfileFlow',\n    inputSchema: GithubProfileInputSchema,\n    outputSchema: GithubProfileOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n\nexport async function verifyGithubProfile(\n  input: GithubProfileInput\n): Promise<GithubProfileOutput> {\n  return verifyGithubProfileFlow(input);\n}\n"],"names":[],"mappings":";;;;;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEO,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IAC9B,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAGA,sDAAsD;AACtD,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aACE;IACF,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM;IAAG;IAC7C,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACrB,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM;QACtB,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM;QACjB,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM;QACtB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,GAAG,QAAQ;AACb,GACA,OAAO,EAAE,QAAQ,EAAE;IACjB,gEAAgE;IAChE,8EAA8E;IAC9E,IAAI,SAAS,WAAW,OAAO,eAAe;QAC5C,OAAO;YACL,cAAc;YACd,SAAS;YACT,cAAc;YACd,OAAO;QACT;IACF;IACA,OAAO;AACT;AAGF,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ;IAAyB;IAC1C,QAAQ;QAAE,QAAQ;IAA0B;IAC5C,OAAO;QAAC;KAAiB;IACzB,QAAQ,CAAC;;;;;AAKX,CAAC;AACD;AAEO,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,OAAO;AACT;AAGK,eAAe,oBACpB,KAAyB;IAEzB,OAAO,wBAAwB;AACjC;;;IAxEa;IAKA;IAmDA;IAYS;;AApET,+OAAA;AAKA,+OAAA;AAmDA,+OAAA;AAYS,+OAAA","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/github/actions.ts"],"sourcesContent":["'use server';\n\nimport { verifyGithubProfile } from '@/ai/flows/github-verifier';\nimport { z } from 'zod';\n\nconst GithubConnectSchema = z.object({\n  username: z.string().min(1, 'GitHub username is required.'),\n});\n\ninterface VerifyGithubState {\n  message: string;\n  user?: {\n    username: string;\n    repositories: number;\n    commits: number;\n    pullRequests: number;\n  } | null;\n  errors?: {\n    username?: string[];\n  } | null;\n}\n\nexport async function verifyGithubAction(\n  prevState: VerifyGithubState,\n  formData: FormData\n): Promise<VerifyGithubState> {\n  const validatedFields = GithubConnectSchema.safeParse({\n    username: formData.get('username'),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      message: 'Validation failed.',\n      errors: validatedFields.error.flatten().fieldErrors,\n    };\n  }\n\n  try {\n    const result = await verifyGithubProfile({\n      username: validatedFields.data.username,\n    });\n\n    if (!result.isValid) {\n      return {\n        message: 'User not found.',\n        errors: {\n          username: ['Could not find a GitHub user with that name. Please check the spelling.'],\n        }\n      };\n    }\n\n    return {\n      message: 'success',\n      user: {\n        username: validatedFields.data.username,\n        repositories: result.repositories,\n        commits: result.commits,\n        pullRequests: result.pullRequests,\n      },\n      errors: null,\n    };\n  } catch (error) {\n    console.error('Error verifying GitHub profile:', error);\n    return {\n      message: 'An unexpected error occurred.',\n      errors: {\n        username: ['Something went wrong on our end. Please try again later.'],\n      },\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAEA,MAAM,sBAAsB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAeO,eAAe,mBACpB,SAA4B,EAC5B,QAAkB;IAElB,MAAM,kBAAkB,oBAAoB,SAAS,CAAC;QACpD,UAAU,SAAS,GAAG,CAAC;IACzB;IAEA,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC5B,OAAO;YACL,SAAS;YACT,QAAQ,gBAAgB,KAAK,CAAC,OAAO,GAAG,WAAW;QACrD;IACF;IAEA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,wIAAA,CAAA,sBAAmB,AAAD,EAAE;YACvC,UAAU,gBAAgB,IAAI,CAAC,QAAQ;QACzC;QAEA,IAAI,CAAC,OAAO,OAAO,EAAE;YACnB,OAAO;gBACL,SAAS;gBACT,QAAQ;oBACN,UAAU;wBAAC;qBAA0E;gBACvF;YACF;QACF;QAEA,OAAO;YACL,SAAS;YACT,MAAM;gBACJ,UAAU,gBAAgB,IAAI,CAAC,QAAQ;gBACvC,cAAc,OAAO,YAAY;gBACjC,SAAS,OAAO,OAAO;gBACvB,cAAc,OAAO,YAAY;YACnC;YACA,QAAQ;QACV;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO;YACL,SAAS;YACT,QAAQ;gBACN,UAAU;oBAAC;iBAA2D;YACxE;QACF;IACF;AACF;;;IAhDsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/github/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {verifyGithubAction as '602dbe774e3e2b4ee8406095c35ea87737a480cd20'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/github/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/github/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/github/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2R,GACxT,yDACA","debugId":null}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/github/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/github/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/github/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuQ,GACpS,qCACA","debugId":null}},
    {"offset": {"line": 506, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}